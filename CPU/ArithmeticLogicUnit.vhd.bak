library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use IEEE.STD_LOGIC_UNSIGNED.all;

entity ArithmeticLogicUnit is
	port(
	
--inputs
	
		Data_s_1			:IN STD_LOGIC_VECTOR (15 DOWNTO 0);
		Data_s_2		   :IN STD_LOGIC_VECTOR (15 DOWNTO 0);
		Opcode			:IN STD_LOGIC_VECTOR(3 downto 0);
		
--outputs
		Output			:OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
		CMP_s2_s1		:OUT STD_LOGIC;
		flags				:OUT STD_LOGIC_VECTOR (15 DOWNTO 0)	
		);
	end ArithmeticLogicUnit;

architecture Behavioral of ArithmeticLogicUnit is

signal Data_A, Data_B, Osignal: STD_LOGIC_VECTOR(15 DOWNTO 0);

begin

Data_A <= Data_s_1;
Data_B <= Data_s_2;
CMP_s2_s1 <= '1';

process(Opcode)
begin

		case Opcode is
			
			when "0000" =>	
			
			   if Data_A > Data_B then
				   Osignal <= Data_A + Data_B;
			      flags<=Data_B;
				else
				   Osignal <= Data_A + Data_B;
				   flags<=Data_A;
				end if;	
			when "0001" =>
				if Data_A > Data_B then
					Osignal <= Data_A - Data_B;
					flags<=Data_B;
				else
					Osignal <= Data_B - Data_A;
				   flags<=Data_A;
				end if;
			
			when "0010" =>
			Osignal <= Data_A AND Data_B;
			   if Data_A > Data_B then
					Osignal <= Data_A - Data_B;
					flags<=Data_B;
				else
					Osignal <= Data_B - Data_A;
				   flags<=Data_A;
				end if;
			when "0011" => 
			Osignal <= Data_A OR Data_B;
			   if Data_A > Data_B then
					Osignal <= Data_A - Data_B;
					flags<=Data_B;
				else
					Osignal <= Data_B - Data_A;
				   flags<=Data_A;
				end if;
			
			when "0100" =>	
			Osignal <= NOT Data_B;
			   if Data_A > Data_B then
					Osignal <= Data_A - Data_B;
					flags<=Data_B;
				else
					Osignal <= Data_B - Data_A;
				   flags<=Data_A;
				end if;
			
			when "0101" =>	
			Osignal <=Data_A XOR Data_B;
			   if Data_A > Data_B then
					Osignal <= Data_A - Data_B;
					flags<=Data_B;
				else
					Osignal <= Data_B - Data_A;
				   flags<=Data_A;
				end if;
			
			when "0110" =>	
				if Data_A = Data_B then
					flags(0) <= '1';
					end if;
				if Data_A = "0000000000000000" then
					flags(1) <= '1';
					end if;
				if Data_B = "0000000000000000" then
					flags(2) <= '1';
					end if;
				if Data_A > Data_B then
					flags(3) <= '1';
					end if;
			  if Data_A < Data_B then
					flags(4) <= '1';
				end if;

			when "0111" =>	Osignal<=std_logic_vector(shift_left(unsigned(Data_A),1));
			
			when "1000" =>	Osignal<=std_logic_vector(shift_right(unsigned(Data_A),1));
					
			when others => Osignal <= Osignal;
			
			end case;
		
end process;
		Output <= Osignal;

end Behavioral;